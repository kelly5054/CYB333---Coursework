import subprocess
import winreg
import os

# Function to check if an antivirus solution is installed and active
def check_antivirus():
    """
    Check if an antivirus solution is installed and active on the system.
    Uses PowerShell commands to search for common antivirus services.
    """
    antivirus_services = ["*Defender*", "*mcafee*", "*symantec*"]
    for service in antivirus_services:
        cmd = f'Get-Service | Where-Object {{$_.DisplayName -Like "{service}"}} | Select-Object Status,DisplayName'
        result = subprocess.run(["powershell", "-Command", cmd], capture_output=True, text=True)
        if result.stdout.strip():  # If output is not empty, an antivirus service is found
            print(f"Antivirus service found: \n{result.stdout}")
            return "Not a Finding"
    print("No antivirus solution found.")
    return "Finding"

# Function to list members of the Administrators group
def check_admin_accounts():
    """
    Check local Administrators group for accounts.
    Uses PowerShell to query the members of the Administrators group.
    """
    cmd = (
        "Get-LocalGroupMember -Group 'Administrators' | "
        "Select-Object Name, PrincipalSource"
    )
    result = subprocess.run(["powershell", "-Command", cmd], capture_output=True, text=True)
    print("Administrators group members:")
    print(result.stdout.strip())
    # Additional checks for domain admins or non-compliant users can be implemented here
    return "Manual Review Required"

# Function to evaluate internet usage policies for administrative accounts
def check_internet_access_policies():
    """
    Check if administrative accounts are restricted from using applications that access the internet.
    This is primarily a manual check based on organizational policies.
    """
    print("Ensure organizational policies restrict admin accounts from internet use.")
    print("This check may require manual verification of policies and application allowlisting.")
    return "Manual Review Required"

# Function to verify if Credential Guard is running
def check_credential_guard():
    """
    Check if Credential Guard is enabled and running on the system.
    Uses PowerShell to query the DeviceGuard CIM class.
    """
    try:
        cmd = "Get-CimInstance -ClassName Win32_DeviceGuard -Namespace root\\Microsoft\\Windows\\DeviceGuard"
        result = subprocess.run(["powershell", "-Command", cmd], capture_output=True, text=True)
        if "1" in result.stdout:  # Check if "1" is in the output, indicating Credential Guard is running
            print("Credential Guard is running.")
            return "Not a Finding"
        else:
            print("Credential Guard is not running.")
            return "Finding"
    except Exception as e:
        print(f"Error checking Credential Guard: {e}")
        return "Error"

# Function to check specific registry keys for compliance
def check_registry_key(hive, path, name, expected_value):
    """
    Check a registry key's value for compliance.
    
    Args:
        hive: The registry hive (e.g., HKEY_LOCAL_MACHINE).
        path: The registry path to the key.
        name: The name of the value to check.
        expected_value: The expected value for compliance.

    Returns:
        A string indicating whether the key is compliant or not.
    """
    try:
        with winreg.OpenKey(hive, path, 0, winreg.KEY_READ) as reg_key:
            value, regtype = winreg.QueryValueEx(reg_key, name)
            if value == expected_value:  # Compare the actual value to the expected value
                return "Not a Finding"
            else:
                return f"Finding: Expected {expected_value}, found {value}"
    except FileNotFoundError:
        return "Finding: Registry key not found"

# Main function to run all checks
def main():
    """
    Main function to run predefined compliance checks.
    Loops through a dictionary of checks and executes each one.
    """
    checks = {
        "Antivirus Check": check_antivirus,
        "Admin Accounts Check": check_admin_accounts,
        "Internet Access Policy Check": check_internet_access_policies,
        "Credential Guard Check": check_credential_guard,
        "Credential Guard Registry Check": lambda: check_registry_key(
            winreg.HKEY_LOCAL_MACHINE,
            r"SOFTWARE\Policies\Microsoft\Windows\DeviceGuard",
            "LsaCfgFlags",
            1
        ),
    }

    # Iterate through all checks, execute them, and print the results
    for check_name, check_function in checks.items():
        print(f"\nRunning: {check_name}")
        result = check_function()
        print(f"Result: {result}")

# Entry point of the script
if __name__ == "__main__":
    main()
