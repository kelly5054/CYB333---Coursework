import socket

def scan_ports(target_host, ports):
    """Scan a list of ports on a target host to identify open ports."""
    open_ports = []

    for port in ports:
        if not (1 <= port <= 65535):
            print(f"Invalid port number: {port}")
            continue

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)  # Set a timeout for the connection attempt

        try:
            # Attempt to connect to the target host on the specified port
            s.connect((target_host, port))
            open_ports.append(port)
        except (socket.timeout, socket.error):
            # If connection fails or times out, the port is considered closed
            pass
        finally:
            # Ensure the socket is closed after each attempt
            s.close()

    return open_ports

def main():
    # Common ports to scan on localhost
    common_ports = [21, 22, 80, 443]
    print("Scanning common ports on localhost...")
    open_ports = scan_ports('localhost', common_ports)
    if open_ports:
        print(f"Open common ports on localhost: {open_ports}")
    else:
        print("No open common ports found on localhost.")

    # Custom port range to scan on localhost
    start_port = 1000
    end_port = 1020
    custom_ports = list(range(start_port, end_port + 1))
    print(f"\nScanning custom port range {start_port}-{end_port} on localhost...")
    open_ports = scan_ports('localhost', custom_ports)
    if open_ports:
        print(f"Open ports in range {start_port}-{end_port} on localhost: {open_ports}")
    else:
        print(f"No open ports found in range {start_port}-{end_port} on localhost.")

    # Selected ports to scan on scanme.nmap.org
    selected_ports = [22, 80, 443]
    print("\nScanning selected ports on scanme.nmap.org...")
    try:
        open_ports = scan_ports('scanme.nmap.org', selected_ports)
        if open_ports:
            print(f"Open selected ports on scanme.nmap.org: {open_ports}")
        else:
            print("No open selected ports found on scanme.nmap.org.")
    except socket.gaierror:
        print("Error: Unable to reach scanme.nmap.org.")

if __name__ == "__main__":
    main()
